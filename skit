import { getFilteredWeatherData } from './dataReader.js';
import { getCityNamesByCountry } from './dataReader.js';

let weatherChart;
let amountOfDataPoints = 0;
let citysToPrint = [];

let startYear = 1910;
let endYear = 2010;

// Initialize the chart with initial data
try {
    const filteredData = await getFilteredWeatherData("Stockholm", startYear, endYear);

    // Extract years and temperatures from the filtered data
    const years = filteredData.map(row => row.year);
    const temperatures = filteredData.map(row => parseFloat(row.AverageTemperatureFahr));

    // Get the canvas context from the HTML
    const ctx = document.getElementById('weatherChart').getContext('2d');

    // Create the chart using Chart.js
    weatherChart = new Chart(ctx, {
        type: 'line',
        data: {
            labels: years,
            datasets: [{
                label: "Stockholm",
                data: temperatures,
                borderColor: 'rgb(75, 192, 192)',
                tension: 0.1,
                fill: false
            }]
        },
        options: {
            responsive: true,
            plugins: {
                legend: {
                    display: true // Enable legend for multiple datasets
                }
            },
            scales: {
                y: {
                    suggestedMin: 50,
                    suggestedMax: 70,
                    beginAtZero: true,
                    title: {
                        display: true,
                        text: 'Temperature (Â°F)'
                    }
                },
                x: {
                    title: {
                        display: true,
                        text: 'Year'
                    }
                }
            }
        }
    });

} catch (error) {
    console.error('Error while drawing chart:', error);
}

// Function to update the year range and reload the chart
function updateYearRange(newStartYear, newEndYear) {
    startYear = newStartYear;
    endYear = newEndYear;
    reloadDataPointsInGraph();
}

// Function to reload data points in the chart based on the cities and updated year range
function reloadDataPointsInGraph() {
    weatherChart.data.datasets = []; // Clear existing datasets
    amountOfDataPoints = 0; // Reset color counter if needed

    citysToPrint.forEach(city => {
        addDataToGraph(city); // Reload data with updated year range
    });

    weatherChart.update(); // Update the chart to reflect changes
}

// Function to add new data to the chart
export async function addDataToGraph(city) {
    try {
        const filteredData = await getFilteredWeatherData(city, startYear, endYear);

        const years = filteredData.map(row => row.year);
        const temperatures = filteredData.map(row => parseFloat(row.AverageTemperatureFahr));
        
        weatherChart.data.datasets.push({
            label: `${city}`,
            data: temperatures,
            borderColor: colors[amountOfDataPoints % colors.length], 
            tension: 0.1,
            fill: false
        });

        amountOfDataPoints++; // Increment counter to use the next color
        weatherChart.update();

    } catch (error) {
        console.error('Error while adding data to chart:', error);
    }
}

// Array of 20 distinct colors
const colors = [
    '#FF5733', '#33FF57', '#3357FF', '#FF33A8', '#33FFF3',
    '#F3FF33', '#FF8C33', '#8C33FF', '#33FF8C', '#FF3380',
    '#8033FF', '#33A8FF', '#A8FF33', '#FF33F3', '#F333FF',
    '#33F3FF', '#FF5733', '#5733FF', '#33FF57', '#FF33A8'
];

// Function to remove a dataset from the chart by city name
export function removeDataFromGraph(city) {
    const datasetIndex = weatherChart.data.datasets.findIndex(dataset => 
        dataset.label && dataset.label.startsWith(city)
    );

    if (datasetIndex !== -1) {
        weatherChart.data.datasets.splice(datasetIndex, 1);
        weatherChart.update();
    } else {
        console.log(`Dataset for ${city} not found.`);
    }
}
